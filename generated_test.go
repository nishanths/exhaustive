package exhaustive

import (
	"go/parser"
	"go/token"
	"testing"
)

func TestContainsGeneratedComment(t *testing.T) {
	cases := []struct {
		comment string
		want    bool
	}{
		{"/* Code generated by some program. DO NOT EDIT.*/", false},
		{"/* Code generated by some program. DO NOT EDIT. */", false},
		{"// Code generated by some program. DO NOT EDIT.", true},
		{"// // Code generated by some program. DO NOT EDIT.", false},
		{"// Code generated DO NOT EDIT.", true},
		{"// Code generated  DO NOT EDIT.", true},
		{"// Code generated by some program. DO NOT EDIT. ", false},
		{"// Code generated .", false},
		{" DO NOT EDIT.", false},
		{"Code generated by some program. DO NOT EDIT.", false},
		{"w", false},
		{"", false},
	}

	for _, tt := range cases {
		checkEqualf(t, tt.want, containsGeneratedComment(tt.comment), "%s", tt.comment)
	}
}

func TestIsGeneratedFile(t *testing.T) {
	t.Run("basic: is generated", func(t *testing.T) {
		f, err := parser.ParseFile(token.NewFileSet(), "", `package foo

func f() {
	// Code generated by some thing. DO NOT EDIT.
}
`, parser.ParseComments)
		if !checkNoError(t, err) {
			return
		}
		checkEqual(t, true, isGeneratedFile(f))
	})

	t.Run("basic: is not generated", func(t *testing.T) {
		f, err := parser.ParseFile(token.NewFileSet(), "", `package foo

func f() {
}
`, parser.ParseComments)
		if !checkNoError(t, err) {
			return
		}
		checkEqual(t, false, isGeneratedFile(f))
	})
}
